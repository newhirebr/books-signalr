name: Flutter CI/CD

on:
  push:
    branches:
      - signal-r

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.13.9' # use the version you need

    - name: Install dependencies
      run: flutter pub get

    - name: Install CocoaPods dependencies
      run: cd ios && pod install && cd ..

    - name: Build iOS
      run: flutter build ios --release --no-codesign
      env:
        XCODE_BUILD_SETTINGS: "-allowProvisioningUpdates"
        
    - name: Install Apple certificate and provisioning profile
      env:
        APPLE_CERTIFICATE: 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
        P12_PASSWORD: myyyynewwwkeyychaaainnpass
        PROVISIONING_PROFILE: 
        KEYCHAIN_PASSWORD: 745HX£325FH!
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Deploy to TestFlight
      run: |
        # Build IPA
        xcodebuild clean -workspace "ios/Runner.xcworkspace" -scheme "Runner" -configuration Release
        xcodebuild archive -workspace "ios/Runner.xcworkspace" -scheme "Runner" -configuration Release -archivePath "build/ios/Runner.xcarchive"
        xcodebuild -exportArchive -archivePath "build/ios/Runner.xcarchive" -exportOptionsPlist "exportOptions.plist" -exportPath "build/ios/"

        # Upload to TestFlight
        altool --upload-app -f "build/ios/Runner.ipa" -t ios -u mmk100@mail.aub.edu -p hveh-blaw-okdn-anbuc --verbose
      env:
        ITC_USER: mmk100@mail.aub.edu
        ITC_APP_SPECIFIC_PASSWORD: hveh-blaw-okdn-anbuc
