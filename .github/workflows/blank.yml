name: Flutter CI/CD

on:
  push:
    branches:
      - signal-r

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Install Xcode Command Line Tools
      run: xcode-select --install || true

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.13.9' # use the version you need

    - name: Install dependencies
      run: flutter pub get

    - name: Install CocoaPods dependencies
      run: cd ios && pod install && cd ..

    - name: Build iOS
      run: flutter build ios --release --no-codesign
      env:
        XCODE_BUILD_SETTINGS: "-allowProvisioningUpdates"
        
    - name: Install Apple certificate and provisioning profile
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Create export options plist
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>ad-hoc</string><key>provisioningProfiles</key><dict><key>com.signalrdemo.books</key><string>signalr provisioning profile</string></dict><key>signingCertificate</key><string>Apple Distribution: Luna Research Collective LLC (M8Y2RP8675)</string><key>signingStyle</key><string>manual</string><key>stripSwiftSymbols</key><true/></dict></plist>' > exportOptions.plist

    - name: Deploy to TestFlight
      run: |
        # Build IPA
        xcodebuild clean -workspace "ios/Runner.xcworkspace" -scheme "Runner" -configuration Release
        xcodebuild archive -workspace "ios/Runner.xcworkspace" -scheme "Runner" -configuration Release -archivePath "build/ios/Runner.xcarchive"
        xcodebuild -exportArchive -archivePath "build/ios/Runner.xcarchive" -exportOptionsPlist "exportOptions.plist" -exportPath "build/ios/"

        # Specify full path to altool and use app-specific password
        /Applications/Xcode.app/Contents/Developer/usr/bin/altool --upload-app -f "build/ios/Runner.xcarchive/Products/Applications/Runner.app" -t ios -u $ITC_USER -p $ITC_APP_SPECIFIC_PASSWORD --verbose
      env:
        ITC_USER: mmk100@mail.aub.edu
        ITC_APP_SPECIFIC_PASSWORD: uluv-jdyo-xjci-nfel
